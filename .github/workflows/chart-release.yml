name: Release Charts

on:
  push:
    branches:
      - master

jobs:
  release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
      
      - name: Get Changed Charts
        id: changed-charts
        run: |
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD | grep '^charts/' | cut -d'/' -f1,2 | uniq)
          if [ -z "$CHANGED_FILES" ]; then
            echo "::warning file=github-actions.log::No charts changed."
            exit 0  # Exit with 0 (success) to stop the workflow without failure
          fi
          echo "CHARTS=$(echo $CHANGED_FILES | tr '\n' ' ')" >> $GITHUB_ENV

      - name: Check if Chart Version is Bumped
        if: env.CHARTS != ''
        id: version_check
        run: |
          for chart in $CHARTS; do
            CURRENT_VERSION=$(yq e '.version' "$chart/Chart.yaml" | xargs)
            PREVIOUS_VERSION=$(git show HEAD^:$chart/Chart.yaml | yq e '.version' - | xargs)

            echo "Current version: $CURRENT_VERSION"
            echo "Previous version: $PREVIOUS_VERSION"

            if [ "$(echo -e "$CURRENT_VERSION\n$PREVIOUS_VERSION" | sort -V | head -n1)" != "$CURRENT_VERSION" ]; then
              echo "::error file=$chart/Chart.yaml::Version not bumped for $chart (current: $CURRENT_VERSION, previous: $PREVIOUS_VERSION). Skipping release."
              echo "SKIP_RELEASE=true" >> $GITHUB_ENV
              exit 1  # Fail the job if the version is not bumped
            fi
          done
  
      - name: Lint Changed Charts
        if: env.CHARTS != '' && env.SKIP_RELEASE != 'true'
        run: |
          for chart in $CHARTS; do
            echo "Linting chart: $chart"
            if [ -f "$chart/lint-values.yaml" ]; then
              echo "Using lint-values.yaml for $chart"
              helm lint "$chart" --values "$chart/lint-values.yaml"
            elif [ -f "$chart/values.yaml" ]; then
              echo "Using values.yaml for $chart"
              helm lint "$chart" --values "$chart/values.yaml"
            else
              echo "No values file found for $chart, using default values"
              helm lint "$chart"
            fi
          done

      - name: Template Changed Charts
        if: env.CHARTS != '' && env.SKIP_RELEASE != 'true'
        run: |
          for chart in $CHARTS; do
            echo "Rendering templates for chart: $chart"

            # Check if lint-values.yaml exists
            if [ -f "$chart/lint-values.yaml" ]; then
              echo "Using lint-values.yaml for $chart"
              helm template "$chart" --values "$chart/lint-values.yaml"
            elif [ -f "$chart/values.yaml" ]; then
              echo "Using values.yaml for $chart"
              helm template "$chart" --values "$chart/values.yaml"
            else
              echo "No values file found for $chart, using default values"
              helm template "$chart"
            fi
          done

      - name: Run chart-releaser
        if: ${{ success() && env.CHARTS != '' && env.SKIP_RELEASE != 'true' }}
        uses: helm/chart-releaser-action@v1.6.0
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
